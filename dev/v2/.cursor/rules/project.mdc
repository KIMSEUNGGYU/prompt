---
description: 프로젝트에 대한 전반적인 설명, new chat 이 새로 시작하면 해당 내용 참고
globs:
alwaysApply: false
---

### 프로젝트 개요

이 프로젝트는 **TMDB API를 활용한 영화 정보 제공 애플리케이션**으로, pnpm-workspace를 사용한 **모노레포** 구조로 구성

- **`apps/movies`**: 메인 리액트 애플리케이션입니다.
- **`packages/*`**: `carousel`, `eslint-config`, `typescript-config`, `webpack-config` 등 여러 앱에서 공유하는 재사용 가능한 코드와 설정 파일들이 위치합니다.

### 핵심 기술 스택

- **UI & Framework**: `React`, `TypeScript`
- **데이터 페칭**: `TanStack Query (React Query)` + `@suspensive/react-query`
- **라우팅**: `React Router`
- **API 클라이언트**: `Axios`
- **스타일링**: `Tailwind CSS`
- **UI 컴포넌트**: `shadcn/ui`, `Radix UI`
- **빌드**: `Webpack`

### 주요 아키텍처 및 개발 원칙

이 프로젝트는 `.cursor/rules/dev.mdc` 파일에 정의된 **"프론트엔드 개발 헌법"**을 따르는 것이 매우 중요합니다. 주요 내용은 다음과 같습니다.

1.  **최상위 가치: 변경 용이성 (Easy to Change)**
    - 코드의 유지보수성과 확장성을 최우선으로 고려합니다.

2.  **아키텍처: 소유권 기반 FSD (Ownership-Driven Feature-Sliced Design)**
    - 코드를 `app`, `pages`, `widgets`, `features`, `entities`, `shared` 6개의 레이어로 구분합니다.
    - **핵심 워크플로우**: 새로운 기능은 `pages` 레이어에서 먼저 구현하고, 재사용이 필요할 때 `widgets`, `features` 등 더 높은 수준의 레이어로 코드를 추출(Promote)합니다.

3.  **100% 선언적 비동기 처리**
    - `isLoading`, `isError` 같은 명령형 코드를 사용하지 않습니다.
    - 대신 `@suspensive/react`와 `@suspensive/react-query`를 사용하여 `<Suspense>`와 `<ErrorBoundary>`로 로딩/에러 상태 처리를 위임합니다.

4.  **관심사 분리 (SoC)**
    - 순수 API 요청 함수(`entities`)와 `queryOptions`(`pages` 또는 `features`)를 분리하여 API 호출과 상태 로직을 명확하게 나눕니다.

### AI 어시스턴트 활용 방안

이러한 규칙과 구조를 바탕으로 저에게 다음과 같이 구체적으로 작업을 요청하실 수 있습니다.

- **기능 구현**:
  - "영화 상세 페이지를 **FSD 아키텍처**에 맞춰 생성해 줘."
  - "검색 기능(`feature`)을 위한 **`queryOptions`** 와 `useSuspenseQuery`를 사용한 컴포넌트 코드를 작성해 줘."

- **리팩토링**:
  - "기존에 `isLoading` 분기 처리로 작성된 코드를 **`@suspensive/react-query`**를 사용한 선언적 코드로 리팩토링해 줘."
  - "`pages`에 있는 이 컴포넌트를 재사용할 수 있도록 `widgets` 레이어로 추출해 줘."

- **코드 리뷰**:
  - "이 코드가 프로젝트의 **'프론트엔드 개발 헌법'**에 명시된 코드 리뷰 가이드라인을 잘 따르고 있는지 검토해 줘."

- **파일 생성**:
  - "`entities/movie/api`에 TMDB의 인기 영화 목록을 가져오는 API 함수를 추가해 줘."

이처럼 프로젝트의 구조와 규칙을 명확히 알려주시면, 제가 훨씬 더 정확하고 일관성 있는 코드를 생성하여 개발 생산성을 높이는 데 도움을 드릴 수 있습니다.

### 작업 히스토리
