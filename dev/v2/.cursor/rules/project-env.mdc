---
description: 프로젝트에 대한 환경설정 관련 작업을 진행할때 해당 부분을 참고해
globs:
alwaysApply: true
---

# Movies Monorepo

이 프로젝트는 [TMDB API](https://www.themoviedb.org/documentation/api)를 활용한 영화 정보 제공 애플리케이션으로, pnpm-workspace를 사용한 모노레포 구조로 구성되어 있습니다.

- **`apps/movies`**: 메인 리액트 애플리케이션입니다.
- **`packages/*`**: `carousel`, `eslint-config`, `typescript-config`, `webpack-config` 등 여러 앱에서 공유하는 재사용 가능한 코드와 설정 파일들이 위치합니다.

---

## 개발 환경 설정: JIT & Compiled 모드

이 프로젝트는 개발 생산성과 프로덕션 성능을 모두 최적화하기 위해 두 가지 패키지 참조 방식을 사용합니다.

- **JIT (Just-In-Time) 모드**: 개발(development) 환경에서 사용됩니다. 패키지의 원본 소스 코드를 직접 참조하여, 별도의 빌드 과정 없이 코드 변경 사항이 애플리케이션에 즉시 반영됩니다. 이를 통해 빠른 HMR(Hot Module Replacement)과 편리한 디버깅 환경을 제공합니다.
- **Compiled 모드**: 프로덕션(production) 환경에서 사용됩니다. 사전에 빌드되고 최적화된 패키지 코드를 참조하여 애플리케이션의 성능을 보장합니다.

### 설정 방법

`apps/movies` 애플리케이션이 `@movies/carousel` 패키지를 참조하는 경우를 예로 듭니다.

#### 1. Webpack 설정 (for JIT)

개발 서버가 패키지의 소스 코드를 직접 사용하도록 `webpack.dev.js`에 `resolve.alias`를 추가합니다.

**`apps/movies/webpack.dev.js`**

```javascript
const { createDevelopmentConfig } = require('@movies-monorepo/webpack-config/development');
const path = require('path');

const config = createDevelopmentConfig(__dirname);

config.resolve.alias = {
  ...config.resolve.alias,
  // '@movies/carousel' 요청을 src 폴더로 직접 연결
  '@movies/carousel': path.resolve(__dirname, '../../packages/carousel/src'),
};

module.exports = config;
```

#### 2. TypeScript 설정 (for JIT)

Webpack과 별개로 TypeScript 컴파일러와 IDE가 소스 코드의 위치를 인식할 수 있도록 `tsconfig.json`에 `paths`를 설정합니다.

**`apps/movies/tsconfig.json`**

```json
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"],
      // 패키지 루트 import (e.g., from '@movies/carousel')
      "@movies/carousel": ["../../packages/carousel/src"],
      // 하위 경로 import (e.g., from '@movies/carousel/utils')
      "@movies/carousel/*": ["../../packages/carousel/src/*"]
    }
  }
}
```

> **중요**: TypeScript가 `dist` 폴더의 타입 선언(`.d.ts`) 대신 `src` 폴더의 원본 코드를 참조하게 하려면, 패키지 **루트**와 **하위 경로(`*`)**를 모두 명시적으로 지정해야 합니다.

### 동작 원리

- **개발 환경**: `yarn dev` 실행 시, `webpack.dev.js`의 `alias` 설정이 적용되어 `@movies/carousel`의 소스 코드가 직접 번들링됩니다. `tsconfig.json`의 `paths` 설정 덕분에 IDE에서도 타입 추론과 "정의로 이동" 기능이 정상적으로 소스 코드를 가리킵니다.
- **프로덕션 환경**: `yarn build` 실행 시, `webpack.prod.js`에는 `alias` 설정이 없으므로, Node.js의 모듈 해석 방식을 따라 `node_modules`에 설치된 `@movies/carousel` 패키지의 빌드된 결과물(`dist`)을 사용합니다.
