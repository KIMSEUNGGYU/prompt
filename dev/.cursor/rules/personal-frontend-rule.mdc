---
description: 상세한 프로그래밍 원칙들
globs: 
alwaysApply: false
---
---
# ===================================================================
#        The Definitive Frontend Development Constitution
#               (A Master Blueprint for You & Your AI)
# ===================================================================
# 이 YAML Frontmatter는 AI가 직접 해석하는 기계 친화적 규칙의 요약본입니다.
# AI는 이 규칙을 기반으로 코드를 생성, 리팩토링 및 리뷰합니다.
# -------------------------------------------------------------------
rules:
  # 섹션 1: 기술 스택 (Tech Stack)
  - "필수 스택: React, TypeScript, TanStack Query, React-Router, Axios, Suspensive@v3"
  - "옵션 스택(필요시 표준으로 채택): Next.js, Zustand, React-Hook-Form+Zod, Jest+RTL, Playwright, TailwindCSS, shadcn/ui."

  # 섹션 2: 최상위 철학 (Core Philosophy)
  - "최우선 가치는 '변경 용이성'이며, 가독성, 예측 가능성, 높은 응집도, 낮은 결합도를 통해 달성한다."
  - "모든 비동기 처리는 Suspensive를 통해 100% 선언적으로 구현. if(isLoading/isError) 사용 금지."
  - "SOLID, 특히 단일 책임 원칙(SRP)과 관심사 분리(SoC)를 모든 코드 설계의 기반으로 삼는다."
  - "복잡한 조건문/매직넘버 사용을 지양하고, 이름 있는 함수/상수로 추상화한다."

  # 섹션 3: 아키텍처 (Architecture)
  - "아키텍처는 '소유권 기반 FSD(Ownership-Driven FSD)' 모델을 따른다."
  - "FSD 구조: Layers(app, pages, widgets, features, entities, shared), Slices(도메인), Segments(ui, api, model, lib, config)."
  - "새로운 기능은 'pages' 슬라이스에서 시작하며, 재사용 시점에 상위 레이어로 추출(Promote)한다."
  
  # 섹션 4: 데이터와 상태 (Data & State)
  - "관심사 분리: 순수 API 함수(axios)는 'entities'에, TanStack Query 옵션 객체는 'features' 또는 'pages'에 위치시킨다."
  - "상태의 영향 범위에 따라 도구를 엄격히 구분: 전역(Zustand), 도메인(Context+Reducer), 지역(useState)."

  # 섹션 5: 구현 및 품질 (Implementation & Quality)
  - "파일의 역할을 명확히 하기 위해 '.query.ts', '.mutation.ts', '.schema.ts', '.type.ts' 접미사 명명 규칙을 따른다."
  - "폼 구현이 필요한 경우, React-Hook-Form과 Zod 조합을 표준 옵션으로 사용한다."
---

# 🚀 프론트엔드 개발 대헌장 (The Grand Constitution)

이 문서는 AI와 개발자가 함께 따라야 할 프로젝트의 최종 가이드입니다. 이 헌법은 개발자님의 개발 철학, 아키텍처 원칙, 그리고 산업 표준의 모범 사례를 통합하여, 변경에 유연하고, 예측 가능하며, 최고 수준의 품질을 갖춘 소프트웨어를 만들기 위한 청사진을 제공합니다.

## 제 1장: 기술 스택 - 우리의 무기

우리는 검증되고 강력한 도구를 사용합니다. 모든 기술 선택은 이 헌법의 다른 원칙들을 가장 잘 뒷받침하기 위해 이루어졌습니다.
-   **필수(Required):** `React`, `TypeScript`, `TanStack Query`, `React-Router`, `Axios`, **`@suspensive/react`, `@suspensive/react-query`**
-   **옵션(Optional but Standard):** `Next.js`, `Zustand`, `React-Hook-Form`+`Zod`, `Jest`+`RTL`, `Playwright`, `Tailwind CSS`, `shadcn/ui`+`Radix UI`

## 제 2장: 개발 철학 - 우리의 영혼

우리의 최상위 가치는 **'변경 용이성(Easy to Change)'** 입니다. 좋은 코드는 비즈니스의 변화를 쉽게 수용할 수 있어야 합니다.

### 핵심 원칙:
-   **가독성 & 예측 가능성:** 코드는 그 자체로 의도를 설명해야 합니다. 이름 붙이기(상수, 함수), 단순화(조기 반환 등), 일관된 패턴을 통해 코드의 이해 비용을 최소화합니다.
-   **응집도 & 결합도:** 높은 응집도(함께 변경될 코드는 함께 위치)와 낮은 결합도(모듈 간 의존 최소화)를 통해 코드의 영향 범위를 제어합니다.
-   **추상화 & 관심사 분리:** 단일 책임 원칙(SRP)에 따라 모든 모듈은 단 하나의 책임만 가집니다. 복잡한 로직은 커스텀 훅으로, UI와 데이터 로직은 명확히 분리합니다.
-   **선언적 프로그래밍:** **Suspensive**를 활용하여 `isLoading`, `isError` 같은 명령형 상태 분기를 코드에서 완전히 제거합니다. 우리는 '성공' 상태의 UI만 선언하며, 로딩과 에러는 `<Suspense>`와 `<ErrorBoundary>`에 위임합니다.

## 제 3장: 아키텍처 - 우리의 청사진

우리는 실용성과 유지보수성을 극대화한 우리만의 **'소유권 기반 FSD(Ownership-Driven FSD)'** 모델을 채택합니다.

-   **구조:** FSD는 `Layers`, `Slices`, `Segments`로 구성됩니다.
    -   `Layers:` `app`, `pages`, `widgets`, `features`, `entities`, `shared`
    -   `Slices:` 각 도메인 단위 (e.g., `user`, `todo`)
    -   `Segments:` `ui`, `api`, `model`, `lib`, `config`

-   **워크플로우:**
    1.  **페이지에서 시작:** 새로운 기능은 그것이 사용되는 `pages` 슬라이스 내에(`ui`, `api`, `model` 포함) 만드는 것을 원칙으로 합니다. 이는 최고의 응집도와 유지보수성을 보장합니다.
    2.  **필요할 때 추출:** 다른 곳에서 해당 기능을 **재사용**해야 할 명백한 필요성이 생겼을 때, 비로소 관련 코드들을 `features`, `widgets`, `entities` 등 적절한 상위 레이어로 **추출(Promote)** 합니다.

## 제 4장: 데이터와 상태 - 우리의 혈액

데이터는 신뢰할 수 있어야 하며, 상태는 명확하게 관리되어야 합니다.

-   **서버 상태 (`TanStack Query`):**
    -   **관심사 분리:** 
    1) 순수 `axios` API 호출 함수는 `entities/.../api/`에, 
    2) 이를 사용하는 `queryOptions` / `mutationOptions` 객체는 `pages/.../api/` 또는 `features/.../api/` 에 위치시켜 의존성을 분리합니다.
-   **클라이언트 상태 (엄격한 구분):**
    -   **전역 (`Zustand`):** 사용자 인증, 앱 테마 등 애플리케이션 전체에서 필요한 최소한의 상태만 허용합니다.
    -   **도메인 (`Context API + useReducer`):** 다단계 폼 등 특정 도메인 내의 복잡한 상태를 격리합니다.
    -   **지역 (`useState`):** 단일 컴포넌트 내의 상태를 위한 기본 선택지입니다.

## 제 5장: 구현과 품질 - 우리의 신뢰

이 장에서는 구체적인 구현 패턴과 품질 보증 활동에 대한 규칙을 정의합니다.

-   **파일 명명:** `*.query.ts`, `*.mutation.ts`, `*.schema.ts`, `*.type.ts` 와 같이 파일의 역할을 드러내는 접미사를 사용하여 파일 기능을 예측할 수 있게 합니다.
-   **표준 솔루션 (옵션):** 
    -   **UI 컴포넌트:** `shadcn/ui` 또는 `Radix UI`를 표준 UI 라이브러리로 채택하여, 일관되고 접근성 높은 UI를 빠르게 구축합니다.
    -   **폼 처리:** **`React-Hook-Form`과 `Zod`** 조합을 폼 구현의 표준 솔루션으로 사용합니다. `Zod`는 폼 유효성 검사가 필요할 때 채택하는 강력한 도구이며, 스키마를 통해 타입과 유효성 규칙을 동시에 관리할 수 있는 장점이 있습니다. API 응답 데이터 검증 등 다른 목적으로도 사용할 수 있지만, 이는 **필수 사항이 아닌 팀의 선택**에 따릅니다.
  
